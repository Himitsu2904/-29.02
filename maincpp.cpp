#include <iostream> //стандартная библиотека ввода-вывода
using namespace std; //пространство имен std

//1. Написать функцию, определяющую среднее арифметическое элементов передаваемого ей массива (return)
template <typename T> //вызов шаблона и создание псевдонима Т для гибкости типов данных и экономии строчек кода
double sred_ar(T arr[], int size)
//функция расчета среднего арифметического элементов массива с динамическим типом данных одного из параметров (массива)
{
	double sum = 0; //оглашение переменной суммы элементов массива
	for (int i = 0; i < size; i++) //цикл расчета суммы элементов массива
	{
		sum += arr[i]; //прибавление к переменной суммы значения элемента массива
	}
	return sum / size;
	/*функция возвращает среднее арифметическое элементов массива (их сумма делиться на размер массива
	(количество элементов)*/
}

/*2. Написать функцию, определяющую количество положительных, отрицательных и нулевых элементов передаваемого ей
массива (print)*/
template <typename T> //вызов шаблона и создание псевдонима Т для гибкости типов данных и экономии строчек кода
void num_sign(T arr[], int size)
/*функция определения количества положительных, нулевых и отрицательных элементов массива с динамическим типом
данных одного из параметров (массива)*/
{
	int plus = 0, zero = 0, minus = 0; //оглашение переменных количества положительных, нулевых и отрицательных элементов массива
	for (int i = 0; i < size; i++) //цикл определения положительного, нулевого или отрицательного элемента массива
	{
		if (arr[i] > 0) //если элемент массива положительный
		{
			plus++; //увеличение количества положительных элементов массива на 1
		}
		else if (arr[i] == 0) //если элемент массива нулевой
		{
			zero++; //увеличение количества нулевых элементов массива на 1
		}
		else //если элемент массива отрицательный
		{
			minus++; //увеличение количества отрицательных элементов массива на 1
		}
	}
	cout << "Количество положительных элементов массива = " << plus << ", нулевых = " << zero << ", а отрицательных = " << minus;
	//вывод количества положительных, нулевых и отрицательных элементов массива
}

//3. Написать функцию, определяющую минимум и максимум (значение и номер) элементов передаваемого ей массива (print)
template <typename T> //вызов шаблона и создание псевдонима Т для гибкости типов данных и экономии строчек кода
void min_max(T arr[], int size)
//функция определения минимума и максимума элементов массива с динамическим типом данных одного из параметров (массива)
{
	int min = arr[0], max = arr[0], ind_min = 0, ind_max = 0;
	/*оглашение переменных минимума и максимума элементов массива (и присвоение им значения первого элемента массива
	как стартовой точки для дальнейшего сравнения*/
	for (int i = 0; i < size; i++) //цикл поиска минимума и максимума элементов массива
	{
		if (arr[i] < min) //если элемент массива меньше нынешнего минимума
		{
			min = arr[i]; //присвоение минимуму нового значения (элемента массива)
			ind_min = i; //фиксация индекса минимума массива
		}
		else if (arr[i] > max) //если элемент массива больше нынешнего максимума
		{
			max = arr[i]; //присвоение максимуму нового значения (элемента массива)
			ind_max = i; //фиксация индекса максимума массива
		}
	}
	cout << "\nМаксимум элементов массива = " << max << " (номер " << ind_max + 1 << "), а минимум = " << min << " (номер " << ind_min + 1 << ")";
	//вывод значений максимума и минимума элементов массива и их номеров (индекс + 1)
}

//4. Написать функцию, возвращающую количество простых чисел в передаваемом ей массиве (return)
template <typename T> //вызов шаблона и создание псевдонима Т для гибкости типов данных и экономии строчек кода
int plain_kol(T arr[], int size)
//функция расчета количества простых чисел в массиве с динамическим типом данных одного из параметров (массива)
{
	bool plainity; //оглашение переменной факта (не)простоты числа
	int k = 0; //оглашение переменной количества простых элементов в массиве
	for (int i = 0; i < size; i++) //цикл работы с элементами массива
	{
		if (arr[i] > 1) //если число МОЖЕТ БЫТЬ простым, выполнять последующие действия
		{
			plainity = true; //изначально считаем, что число является простым
			for (int j = 2; j < arr[i]; j++) //цикл поиска других делителей числа, помимо 1 и себя самого
			{
				if (arr[i] % j == 0) //если у числа есть делитель, помимо 1 и себя самого
				{
					plainity = false; //фиксация факта непростоты элемента массива
					break; //выход из цикла
				}
			}
			if (plainity) //если число является простым
			{
				k++; //увеличить количество простых элементов массива на 1
			}
		}
	}
	return k; //функция возвращает количество простых элементов массива
}

//--------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------

//Перегрузка для массивов типа int и double
//1. Среднее арифметическое значение передаваемого массива (return)
double SredAr(int arr[], int size) //функция расчета среднего арифметического передаваемого массива целых чисел
//функция расчета среднего арифметического элементов массива с динамическим типом данных одного из параметров (массива)
{
	double sum = 0; //оглашение переменной суммы элементов массива
	for (int i = 0; i < size; i++) //цикл расчета суммы элементов массива
	{
		sum += arr[i]; //прибавление к переменной суммы значения элемента массива
	}
	return sum / size;
	/*функция возвращает среднее арифметическое элементов массива (их сумма делиться на размер массива
	(количество элементов)*/
}
double SredAr(double arr[], int size)//функция расчета среднего арифметического передаваемого массива действенных чисел
//функция расчета среднего арифметического элементов массива с динамическим типом данных одного из параметров (массива)
{
	double sum = 0; //оглашение переменной суммы элементов массива
	for (int i = 0; i < size; i++) //цикл расчета суммы элементов массива
	{
		sum += arr[i]; //прибавление к переменной суммы значения элемента массива
	}
	return sum / size;
	/*функция возвращает среднее арифметическое элементов массива (их сумма делиться на размер массива
	(количество элементов)*/
}

//2. Сумма первого и последнего элемента (return)
int FirstLast(int arr[], int size) //функция расчета суммы первого и последнего элементов массива целых чисел
{
	int sum = 0; //оглашение переменной суммы первого и последнего элементов массива целых чисел
	for (int i = 0; i < size; i++) //цикл перебора элементов массива целых чисел
	{
		if (i == 0 || i == size - 1) //условие первого и последнего элементов массива целых чисел
		{
			sum += arr[i]; //прибавление первого или последнего элементов массива целых чисел к сумме
		}
	}
	return sum; //функция возвращает значение суммы первого и последнего элементов массива целых чисел
}
double FirstLast(double arr[], int size)
//функция расчета суммы первого и последнего элементов массива действенных чисел
{
	double sum = 0; //оглашение переменной суммы первого и последнего элементов массива действенных чисел
	for (int i = 0; i < size; i++) //цикл перебора элементов массива действенных чисел
	{
		if (i == 0 || i == size - 1) //условие первого и последнего элементов массива действенных чисел
		{
			sum += arr[i]; //прибавление первого или последнего элементов массива действенных чисел к сумме
		}
	}
	return sum; //функция возвращает значение суммы первого и последнего элементов массива действенных чисел
}

int main() //главная функция программы, ее стартовая точка
{
	setlocale(0, "ru"); //локализация кода программы
	const int size = 10; //оглашение константы размера массива
	int arr[size] = { 1,5,7,3,5,87,23,-4,63,0 }; //оглашение массива
	srand(time(0));
	//функция, благодаря которой каждый раз при активации программы рандомно будут генерироваться РАЗНЫЕ числа
	cout << "Массив целых цисел arr:\n";
	for (int i = 0; i < size; i++) //цикл генерации случайных значений элементов массива в диапазоне от -10 до 10
	{
		arr[i] = rand() % 21 - 10; //генерация элемента массива в диапазоне от -10 до 10
		cout << arr[i] << "\t"; //вывод элемента массива в диапазоне от -10 до 10
	}
	double ARR[size] = { -2.4, 45.3, 12.8, -3.9, 21, 5,0,37.1, 54.3, -76.7 };
	//оглашение и инициализация массива действенных чисел
	cout << "\nМассив действенных чисел ARR:\n";
	for (int i = 0; i < size; i++) //цикл вывода элементов массива действенных чисел
	{
		cout << ARR[i] << "\t";
	}
	cout << "\nСреднее арифметическое элементов массива ARR = " << sred_ar(ARR, size) << "\n";
	//вызов функции расчета среднего арифметического элементов массива действенных чисел и вывод результата

	cout << "(int) ";
	num_sign(arr, size);
	//вызов функции определения количества положительных, нулевых и отрицательных элементов массива целых чисел

	char mass[size] = { 'v','W','23','f','U','q','t',';','/',']' }; //оглашение и инициализация массива символов
	cout << "\n(char)";
	min_max(mass, size); //вызов функции определения минимума и максимума элементов массива

	cout << "\nКоличество простых чисел в массиве arr = " << plain_kol(arr, size);
	//вызов функции расчета количества простых чисел в массиве и вывод её результата, работает с массивом целых чисел
	
	cout << "\n---------------------------------------------------------------------";
	cout << "\n---------------------------------------------------------------------\n";

	cout << "\nСреднее арифметическое элементов массива целых чисел = " << SredAr(arr, size);
	//вызов функции расчета среднего арифметического элементов массива целых чисел и вывод результата
	cout << "\nСреднее арифметическое элементов массива действенных чисел = " << SredAr(ARR, size);
	//вызов функции расчета среднего арифметического элементов массива действенных чисел и вывод результата

	cout << "\nСумма первого и последнего элементов массива целых чисел = " << FirstLast(arr, size);
	//вызов функции расчета суммы первого и последнего элементов массива целых чисел и вывод результата её работы
	cout << "\nСумма первого и последнего элементов массива действенных чисел = " << FirstLast(ARR, size);
	//вызов функции расчета суммы первого и последнего элементов массива действенных чисел и вывод результата её работы
}